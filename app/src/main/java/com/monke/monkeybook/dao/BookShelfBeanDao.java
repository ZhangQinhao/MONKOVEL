package com.monke.monkeybook.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.monke.monkeybook.bean.BookShelfBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK_SHELF_BEAN".
*/
public class BookShelfBeanDao extends AbstractDao<BookShelfBean, String> {

    public static final String TABLENAME = "BOOK_SHELF_BEAN";

    /**
     * Properties of entity BookShelfBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property NoteUrl = new Property(0, String.class, "noteUrl", true, "NOTE_URL");
        public final static Property DurChapter = new Property(1, int.class, "durChapter", false, "DUR_CHAPTER");
        public final static Property DurChapterPage = new Property(2, int.class, "durChapterPage", false, "DUR_CHAPTER_PAGE");
        public final static Property FinalDate = new Property(3, long.class, "finalDate", false, "FINAL_DATE");
        public final static Property HasUpdate = new Property(4, boolean.class, "hasUpdate", false, "HAS_UPDATE");
        public final static Property NewChapters = new Property(5, int.class, "newChapters", false, "NEW_CHAPTERS");
        public final static Property Tag = new Property(6, String.class, "tag", false, "TAG");
        public final static Property SerialNumber = new Property(7, int.class, "serialNumber", false, "SERIAL_NUMBER");
        public final static Property FinalRefreshData = new Property(8, long.class, "finalRefreshData", false, "FINAL_REFRESH_DATA");
    }


    public BookShelfBeanDao(DaoConfig config) {
        super(config);
    }
    
    public BookShelfBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK_SHELF_BEAN\" (" + //
                "\"NOTE_URL\" TEXT PRIMARY KEY NOT NULL ," + // 0: noteUrl
                "\"DUR_CHAPTER\" INTEGER NOT NULL ," + // 1: durChapter
                "\"DUR_CHAPTER_PAGE\" INTEGER NOT NULL ," + // 2: durChapterPage
                "\"FINAL_DATE\" INTEGER NOT NULL ," + // 3: finalDate
                "\"HAS_UPDATE\" INTEGER NOT NULL ," + // 4: hasUpdate
                "\"NEW_CHAPTERS\" INTEGER NOT NULL ," + // 5: newChapters
                "\"TAG\" TEXT," + // 6: tag
                "\"SERIAL_NUMBER\" INTEGER NOT NULL ," + // 7: serialNumber
                "\"FINAL_REFRESH_DATA\" INTEGER NOT NULL );"); // 8: finalRefreshData
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK_SHELF_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookShelfBean entity) {
        stmt.clearBindings();
 
        String noteUrl = entity.getNoteUrl();
        if (noteUrl != null) {
            stmt.bindString(1, noteUrl);
        }
        stmt.bindLong(2, entity.getDurChapter());
        stmt.bindLong(3, entity.getDurChapterPage());
        stmt.bindLong(4, entity.getFinalDate());
        stmt.bindLong(5, entity.getHasUpdate() ? 1L: 0L);
        stmt.bindLong(6, entity.getNewChapters());
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(7, tag);
        }
        stmt.bindLong(8, entity.getSerialNumber());
        stmt.bindLong(9, entity.getFinalRefreshData());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookShelfBean entity) {
        stmt.clearBindings();
 
        String noteUrl = entity.getNoteUrl();
        if (noteUrl != null) {
            stmt.bindString(1, noteUrl);
        }
        stmt.bindLong(2, entity.getDurChapter());
        stmt.bindLong(3, entity.getDurChapterPage());
        stmt.bindLong(4, entity.getFinalDate());
        stmt.bindLong(5, entity.getHasUpdate() ? 1L: 0L);
        stmt.bindLong(6, entity.getNewChapters());
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(7, tag);
        }
        stmt.bindLong(8, entity.getSerialNumber());
        stmt.bindLong(9, entity.getFinalRefreshData());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public BookShelfBean readEntity(Cursor cursor, int offset) {
        BookShelfBean entity = new BookShelfBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // noteUrl
            cursor.getInt(offset + 1), // durChapter
            cursor.getInt(offset + 2), // durChapterPage
            cursor.getLong(offset + 3), // finalDate
            cursor.getShort(offset + 4) != 0, // hasUpdate
            cursor.getInt(offset + 5), // newChapters
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // tag
            cursor.getInt(offset + 7), // serialNumber
            cursor.getLong(offset + 8) // finalRefreshData
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookShelfBean entity, int offset) {
        entity.setNoteUrl(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDurChapter(cursor.getInt(offset + 1));
        entity.setDurChapterPage(cursor.getInt(offset + 2));
        entity.setFinalDate(cursor.getLong(offset + 3));
        entity.setHasUpdate(cursor.getShort(offset + 4) != 0);
        entity.setNewChapters(cursor.getInt(offset + 5));
        entity.setTag(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSerialNumber(cursor.getInt(offset + 7));
        entity.setFinalRefreshData(cursor.getLong(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(BookShelfBean entity, long rowId) {
        return entity.getNoteUrl();
    }
    
    @Override
    public String getKey(BookShelfBean entity) {
        if(entity != null) {
            return entity.getNoteUrl();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BookShelfBean entity) {
        return entity.getNoteUrl() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
