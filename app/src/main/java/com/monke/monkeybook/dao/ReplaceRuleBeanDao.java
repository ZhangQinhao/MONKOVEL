package com.monke.monkeybook.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.monke.monkeybook.bean.ReplaceRuleBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REPLACE_RULE_BEAN".
*/
public class ReplaceRuleBeanDao extends AbstractDao<ReplaceRuleBean, Long> {

    public static final String TABLENAME = "REPLACE_RULE_BEAN";

    /**
     * Properties of entity ReplaceRuleBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ReplaceSummary = new Property(1, String.class, "replaceSummary", false, "REPLACE_SUMMARY");
        public final static Property Regex = new Property(2, String.class, "regex", false, "REGEX");
        public final static Property Replacement = new Property(3, String.class, "replacement", false, "REPLACEMENT");
        public final static Property Enable = new Property(4, Boolean.class, "enable", false, "ENABLE");
        public final static Property SerialNumber = new Property(5, int.class, "serialNumber", false, "SERIAL_NUMBER");
    }


    public ReplaceRuleBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ReplaceRuleBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REPLACE_RULE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"REPLACE_SUMMARY\" TEXT," + // 1: replaceSummary
                "\"REGEX\" TEXT," + // 2: regex
                "\"REPLACEMENT\" TEXT," + // 3: replacement
                "\"ENABLE\" INTEGER," + // 4: enable
                "\"SERIAL_NUMBER\" INTEGER NOT NULL );"); // 5: serialNumber
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REPLACE_RULE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ReplaceRuleBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String replaceSummary = entity.getReplaceSummary();
        if (replaceSummary != null) {
            stmt.bindString(2, replaceSummary);
        }
 
        String regex = entity.getRegex();
        if (regex != null) {
            stmt.bindString(3, regex);
        }
 
        String replacement = entity.getReplacement();
        if (replacement != null) {
            stmt.bindString(4, replacement);
        }
 
        Boolean enable = entity.getEnable();
        if (enable != null) {
            stmt.bindLong(5, enable ? 1L: 0L);
        }
        stmt.bindLong(6, entity.getSerialNumber());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ReplaceRuleBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String replaceSummary = entity.getReplaceSummary();
        if (replaceSummary != null) {
            stmt.bindString(2, replaceSummary);
        }
 
        String regex = entity.getRegex();
        if (regex != null) {
            stmt.bindString(3, regex);
        }
 
        String replacement = entity.getReplacement();
        if (replacement != null) {
            stmt.bindString(4, replacement);
        }
 
        Boolean enable = entity.getEnable();
        if (enable != null) {
            stmt.bindLong(5, enable ? 1L: 0L);
        }
        stmt.bindLong(6, entity.getSerialNumber());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ReplaceRuleBean readEntity(Cursor cursor, int offset) {
        ReplaceRuleBean entity = new ReplaceRuleBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // replaceSummary
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // regex
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // replacement
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // enable
            cursor.getInt(offset + 5) // serialNumber
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ReplaceRuleBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setReplaceSummary(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRegex(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setReplacement(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEnable(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setSerialNumber(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ReplaceRuleBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ReplaceRuleBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ReplaceRuleBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
